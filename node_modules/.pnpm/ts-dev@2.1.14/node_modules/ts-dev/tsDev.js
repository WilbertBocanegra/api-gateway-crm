#!/usr/bin/env node --unhandled-rejections=strict --no-warnings --enable-source-maps --experimental-specifier-resolution=node
import fs from 'node:fs/promises';
import path from 'path';
import typescript from 'typescript';
import { once } from 'events';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { inspect } from 'util';
import npmLogger from './npmLogger';
import npmRequire from './npmRequire';
function isString(s) {
    return typeof s === 'string';
}
async function fsStat(path) {
    try {
        return await fs.stat(path);
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            return undefined;
        }
        throw e;
    }
}
class TypescriptDevelopmentTool {
    constructor() {
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: npmLogger('ts-dev')
        });
        Object.defineProperty(this, "compilerOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "clean", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.prebuild
        });
        const configFilePath = typescript.findConfigFile('.', typescript.sys.fileExists);
        if (!configFilePath) {
            throw new Error('Unable to find project config file.');
        }
        const readConfigFileResult = typescript.parseJsonSourceFileConfigFileContent(typescript.readJsonConfigFile(configFilePath, typescript.sys.readFile), typescript.sys, './');
        if (readConfigFileResult.errors.length) {
            throw new Error(`Unable to read project config file [${configFilePath}]. ${inspect(readConfigFileResult.errors)}`);
        }
        const compilerOptions = readConfigFileResult.options;
        if (!compilerOptions) {
            throw new Error(`Unable to get compilerOptions from project config file [${configFilePath}].`);
        }
        compilerOptions.configFilePath = configFilePath;
        this.compilerOptions = compilerOptions;
    }
    async main() {
        const lifecycleEvent = process.env.npm_lifecycle_event;
        if (!lifecycleEvent) {
            this.logger.warn('Runned outside npm');
            return;
        }
        const rawLifecycleEvent = lifecycleEvent.split(':')[0];
        const method = this[rawLifecycleEvent];
        if (!method) {
            this.logger.error(`Unknown npm lifecycle [${lifecycleEvent}]`);
            return process.exit(1);
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return method.call(this);
    }
    // TODO - lint
    // TODO - compile
    // TODO - build = (lint+compile) &&
    async loadAndParseJson(jsonFileName) {
        const jsonContent = await fs.readFile(jsonFileName, { encoding: 'utf8' });
        return JSON.parse(jsonContent);
    }
    async prebuild() {
        if (this.compilerOptions.outDir) {
            fs.rmdir(this.compilerOptions.outDir, { recursive: true });
            this.logger.info(`Directory [${this.compilerOptions.outDir}] has been erased`);
        }
        if (this.compilerOptions.declarationDir) {
            fs.rmdir(this.compilerOptions.declarationDir, { recursive: true });
            this.logger.info(`Directory [${this.compilerOptions.declarationDir}] has been erased`);
        }
        const tsBuildInfoFile = typescript.getTsBuildInfoEmitOutputFilePath(this.compilerOptions);
        if (tsBuildInfoFile && await fsStat(tsBuildInfoFile)) {
            await fs.unlink(tsBuildInfoFile);
            this.logger.info(`File [${tsBuildInfoFile}] has been erased`);
        }
        return 0;
    }
    async build() {
        // Creating "dist/esm" folder
        if (this.compilerOptions.outDir) {
            if (!await fsStat(this.compilerOptions.outDir)) {
                await fs.mkdir(this.compilerOptions.outDir, { recursive: true });
                this.logger.info(`Folder [${this.compilerOptions.outDir}] has been created`);
            }
        }
        if (this.compilerOptions.declarationDir) {
            if (this.compilerOptions.declarationDir && !await fsStat(this.compilerOptions.declarationDir)) {
                fs.mkdir(this.compilerOptions.declarationDir, { recursive: true });
                this.logger.info(`Folder [${this.compilerOptions.declarationDir}] has been created`);
            }
        }
        /*
        // Use rootDirs to join inside dist
        if (this.rootDirs) {
          const rootDir = this.rootDir;
          if (!rootDir) {
            this.logger.error('Cannot join rootDirs without rootDir');
            return process.exit(9);
          }
          const distDirs = this.rootDirs.map(rd => path.resolve(this.outDir, path.relative(rootDir, rd)));
          this.logger.info(`TODO - Join distDirs [${distDirs}] inside rootDir [${rootDir}]`);
        }
          */
        if (this.compilerOptions.outDir) {
            const npmPacklist = npmRequire('npm-packlist');
            const excludedRootfiles = [
                'package.json',
                'tsconfig.json',
            ];
            const excludedPaths = [
                this.compilerOptions.rootDir,
                this.compilerOptions.outDir,
                this.compilerOptions.declarationDir,
                typescript.getTsBuildInfoEmitOutputFilePath(this.compilerOptions),
            ].filter(isString);
            const files = (await npmPacklist({ path: '.', })).filter(f => !/(?:^|\/)\./.test(f) &&
                !excludedRootfiles.includes(f) &&
                !excludedPaths.some(p => f.startsWith(p)));
            const dirs = [];
            for (const f of files) {
                const destinationFilePath = path.resolve(this.compilerOptions.outDir, f);
                const destinationDirectory = path.dirname(destinationFilePath);
                if (!dirs.includes(destinationDirectory)) {
                    await fs.mkdir(destinationDirectory, { recursive: true });
                    dirs.push(destinationDirectory);
                }
                await fs.copyFile(f, destinationFilePath);
                this.logger.info(`File [${f}] has been copied`);
            }
        }
        return await this.createPackageJson();
    }
    async createPackageJson() {
        // Creating package.json
        const packageJson = await this.loadAndParseJson(path.resolve('package.json'));
        const devDependencies = packageJson.devDependencies;
        delete packageJson.devDependencies;
        delete packageJson.scripts;
        const dist = packageJson.dist;
        if (dist !== undefined) {
            delete packageJson.dist;
            Object.assign(packageJson, dist);
        }
        if (this.compilerOptions.outDir) {
            await this.writeOutDirFiles(this.compilerOptions.outDir, packageJson);
        }
        if (this.compilerOptions.declarationDir) {
            const packageJsonName = packageJson.name;
            // name => @types/name
            // @scope/name => @scope/types__name
            const typesPackageName = packageJsonName.startsWith('@') ? packageJsonName.replace('/', '/types__') : `@types/${packageJson.name}`;
            // TODO odfiltrowane rzeczywistą listą zależności w declarationDir
            const dependencies = Object.fromEntries(Object.entries(devDependencies).filter(([packageName]) => /(?:^@types\/)|(?:\/types__)/.test(packageName)));
            const typesPackageJson = {
                name: typesPackageName,
                version: packageJson.version,
                description: `Typescript definitions for ${packageJson.name}`,
                repository: packageJson.repository,
                author: packageJson.author,
                license: packageJson.license,
                dependencies,
            };
            await this.writeOutDirFiles(this.compilerOptions.declarationDir, typesPackageJson);
        }
        return 0;
    }
    async writeOutDirFiles(dir, packageJson) {
        const distPackageJsonString = JSON.stringify(packageJson, undefined, 2);
        const distPackageJsonFilename = path.resolve(dir, 'package.json');
        await fs.writeFile(distPackageJsonFilename, distPackageJsonString);
        this.logger.info(`File [${distPackageJsonFilename}] has been created`);
        const npmIgnoreContent = [
            '/**/*.test.js',
            '/**/*.test.[cm]js',
            '/**/*.test.d.ts',
            '/test/',
        ].join('\n');
        const npmIgnoreFilename = path.resolve(dir, '.npmignore');
        await fs.writeFile(npmIgnoreFilename, npmIgnoreContent);
        this.logger.info(`File [${npmIgnoreFilename}] has been created`);
    }
    /**
     * Blokada prepack zabezpiecza również przez publish
     */
    async prepack() {
        if (process.env.npm_config_argv) {
            const argv = JSON.parse(process.env.npm_config_argv);
            if (argv.cooked[0] === 'run') {
                return 0;
            }
            this.logger.error(`Use npm run ${argv.original.join(' ')}`);
        }
        return process.exit(1);
    }
    async pack() {
        const createPack = async (dir) => {
            if (!dir) {
                return false;
            }
            const npmProcess = spawn('npm', ['pack', path.resolve(dir)], { shell: true, stdio: 'inherit' });
            const [exitCode] = await once(npmProcess, 'close');
            if (exitCode) {
                process.exit(exitCode);
            }
            this.logger.info(`The package from output directory [${this.compilerOptions.outDir}] has been packed`);
            return true;
        };
        if (![
            await createPack(this.compilerOptions.outDir),
            await createPack(this.compilerOptions.declarationDir),
        ].some(r => r)) {
            this.logger.warn('Nothing to pack');
        }
    }
    async publish() {
        if (!this.compilerOptions.outDir) {
            this.logger.warn('Nothing to publish');
            return;
        }
        // Kontrola zgoności wersji w package.json src oraz dist
        const mainPackageJson = await this.loadAndParseJson(path.resolve('package.json'));
        const distPackageJson = await this.loadAndParseJson(path.resolve(this.compilerOptions.outDir, 'package.json'));
        if (mainPackageJson.version !== distPackageJson.version) {
            this.logger.error(`Inconsistent version. Main [${mainPackageJson.version}] dist [${distPackageJson.version}]. Try build again.`);
            return process.exit(9);
        }
        const npmProcess = spawn('npm', ['publish', path.resolve(this.compilerOptions.outDir)], { shell: true, stdio: 'inherit' });
        const [exitCode] = await once(npmProcess, 'close');
        if (exitCode) {
            process.exit(exitCode);
        }
        this.logger.info(`The package from output directory [${this.compilerOptions.outDir}] has been published`);
        return 0;
    }
    async prepublishOnly() {
        if (process.env.npm_config_argv) {
            const argv = JSON.parse(process.env.npm_config_argv);
            this.logger.error(`Use npm run ${argv.original.join(' ')}`);
        }
        return process.exit(1);
    }
    /**
     * Aktualizacja projektu związana ze zmianą wersji (tj. przebudowanie package.json)
     */
    async version() {
        return await this.createPackageJson();
    }
}
if (fileURLToPath(import.meta.url) === process.argv[1]) {
    new TypescriptDevelopmentTool().main();
}
//# sourceMappingURL=data:application/json;base64,